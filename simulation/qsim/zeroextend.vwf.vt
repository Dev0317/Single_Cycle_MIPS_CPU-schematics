// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2018 00:04:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          zeroextend
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module zeroextend_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] IN;
// wires                                               
wire [31:0] OUT;

// assign statements (if any)                          
zeroextend i1 (
// port map - connection between master ports and signals/registers   
	.IN(IN),
	.OUT(OUT)
);
initial 
begin 
#10000000 $finish;
end 
// IN[ 31 ]
initial
begin
	IN[31] = 1'b1;
	IN[31] = #2000000 1'b0;
	IN[31] = #1000000 1'b1;
	IN[31] = #4000000 1'b0;
	IN[31] = #1000000 1'b1;
end 
// IN[ 30 ]
initial
begin
	IN[30] = 1'b1;
	IN[30] = #2000000 1'b0;
	IN[30] = #2000000 1'b1;
	IN[30] = #1000000 1'b0;
	IN[30] = #2000000 1'b1;
	IN[30] = #1000000 1'b0;
end 
// IN[ 29 ]
initial
begin
	IN[29] = 1'b1;
	IN[29] = #1000000 1'b0;
	IN[29] = #1000000 1'b1;
	IN[29] = #1000000 1'b0;
	IN[29] = #1000000 1'b1;
	IN[29] = #5000000 1'b0;
end 
// IN[ 28 ]
initial
begin
	IN[28] = 1'b0;
	IN[28] = #2000000 1'b1;
	IN[28] = #2000000 1'b0;
	IN[28] = #1000000 1'b1;
	IN[28] = #1000000 1'b0;
	IN[28] = #3000000 1'b1;
end 
// IN[ 27 ]
initial
begin
	IN[27] = 1'b0;
	IN[27] = #3000000 1'b1;
	IN[27] = #3000000 1'b0;
	IN[27] = #1000000 1'b1;
	IN[27] = #1000000 1'b0;
end 
// IN[ 26 ]
initial
begin
	IN[26] = 1'b1;
	IN[26] = #1000000 1'b0;
	IN[26] = #1000000 1'b1;
	IN[26] = #2000000 1'b0;
	IN[26] = #3000000 1'b1;
	IN[26] = #2000000 1'b0;
end 
// IN[ 25 ]
initial
begin
	IN[25] = 1'b1;
	IN[25] = #1000000 1'b0;
	IN[25] = #4000000 1'b1;
	IN[25] = #2000000 1'b0;
	IN[25] = #1000000 1'b1;
	IN[25] = #1000000 1'b0;
end 
// IN[ 24 ]
initial
begin
	IN[24] = 1'b1;
	IN[24] = #2000000 1'b0;
	IN[24] = #6000000 1'b1;
end 
// IN[ 23 ]
initial
begin
	IN[23] = 1'b0;
	IN[23] = #1000000 1'b1;
	IN[23] = #2000000 1'b0;
	IN[23] = #1000000 1'b1;
	IN[23] = #2000000 1'b0;
	IN[23] = #1000000 1'b1;
	IN[23] = #1000000 1'b0;
end 
// IN[ 22 ]
initial
begin
	IN[22] = 1'b1;
	IN[22] = #1000000 1'b0;
	IN[22] = #2000000 1'b1;
	IN[22] = #2000000 1'b0;
	IN[22] = #1000000 1'b1;
end 
// IN[ 21 ]
initial
begin
	IN[21] = 1'b0;
	IN[21] = #1000000 1'b1;
	IN[21] = #1000000 1'b0;
	IN[21] = #1000000 1'b1;
	IN[21] = #3000000 1'b0;
	IN[21] = #1000000 1'b1;
end 
// IN[ 20 ]
initial
begin
	IN[20] = 1'b1;
	IN[20] = #1000000 1'b0;
	IN[20] = #6000000 1'b1;
	IN[20] = #1000000 1'b0;
	IN[20] = #1000000 1'b1;
end 
// IN[ 19 ]
initial
begin
	IN[19] = 1'b0;
	IN[19] = #3000000 1'b1;
	IN[19] = #3000000 1'b0;
	IN[19] = #2000000 1'b1;
end 
// IN[ 18 ]
initial
begin
	IN[18] = 1'b0;
	IN[18] = #3000000 1'b1;
	IN[18] = #1000000 1'b0;
	IN[18] = #1000000 1'b1;
	IN[18] = #2000000 1'b0;
end 
// IN[ 17 ]
initial
begin
	IN[17] = 1'b0;
	IN[17] = #1000000 1'b1;
	IN[17] = #1000000 1'b0;
	IN[17] = #2000000 1'b1;
	IN[17] = #2000000 1'b0;
	IN[17] = #3000000 1'b1;
end 
// IN[ 16 ]
initial
begin
	IN[16] = 1'b0;
	IN[16] = #2000000 1'b1;
	IN[16] = #1000000 1'b0;
	IN[16] = #3000000 1'b1;
	IN[16] = #1000000 1'b0;
	IN[16] = #1000000 1'b1;
	IN[16] = #1000000 1'b0;
end 
// IN[ 15 ]
initial
begin
	IN[15] = 1'b1;
	IN[15] = #2000000 1'b0;
	IN[15] = #2000000 1'b1;
	IN[15] = #1000000 1'b0;
	IN[15] = #2000000 1'b1;
end 
// IN[ 14 ]
initial
begin
	IN[14] = 1'b0;
	IN[14] = #1000000 1'b1;
	IN[14] = #3000000 1'b0;
	IN[14] = #1000000 1'b1;
	IN[14] = #1000000 1'b0;
	IN[14] = #3000000 1'b1;
end 
// IN[ 13 ]
initial
begin
	IN[13] = 1'b0;
	IN[13] = #1000000 1'b1;
	IN[13] = #4000000 1'b0;
end 
// IN[ 12 ]
initial
begin
	IN[12] = 1'b0;
	IN[12] = #1000000 1'b1;
	IN[12] = #5000000 1'b0;
end 
// IN[ 11 ]
initial
begin
	IN[11] = 1'b1;
	IN[11] = #1000000 1'b0;
	IN[11] = #1000000 1'b1;
	IN[11] = #1000000 1'b0;
	IN[11] = #1000000 1'b1;
	IN[11] = #1000000 1'b0;
	IN[11] = #1000000 1'b1;
	IN[11] = #1000000 1'b0;
	IN[11] = #2000000 1'b1;
end 
// IN[ 10 ]
initial
begin
	IN[10] = 1'b1;
	IN[10] = #2000000 1'b0;
	IN[10] = #2000000 1'b1;
	IN[10] = #2000000 1'b0;
	IN[10] = #1000000 1'b1;
	IN[10] = #1000000 1'b0;
	IN[10] = #1000000 1'b1;
end 
// IN[ 9 ]
initial
begin
	IN[9] = 1'b0;
	IN[9] = #1000000 1'b1;
	IN[9] = #3000000 1'b0;
	IN[9] = #3000000 1'b1;
	IN[9] = #1000000 1'b0;
	IN[9] = #1000000 1'b1;
end 
// IN[ 8 ]
initial
begin
	IN[8] = 1'b0;
	IN[8] = #1000000 1'b1;
	IN[8] = #1000000 1'b0;
	IN[8] = #1000000 1'b1;
	IN[8] = #1000000 1'b0;
	IN[8] = #3000000 1'b1;
	IN[8] = #2000000 1'b0;
end 
// IN[ 7 ]
initial
begin
	IN[7] = 1'b0;
	IN[7] = #2000000 1'b1;
	IN[7] = #1000000 1'b0;
	IN[7] = #1000000 1'b1;
	IN[7] = #5000000 1'b0;
end 
// IN[ 6 ]
initial
begin
	IN[6] = 1'b0;
	IN[6] = #1000000 1'b1;
	IN[6] = #1000000 1'b0;
	IN[6] = #1000000 1'b1;
	IN[6] = #1000000 1'b0;
	IN[6] = #1000000 1'b1;
end 
// IN[ 5 ]
initial
begin
	IN[5] = 1'b1;
	IN[5] = #2000000 1'b0;
	IN[5] = #2000000 1'b1;
	IN[5] = #2000000 1'b0;
end 
// IN[ 4 ]
initial
begin
	IN[4] = 1'b0;
	IN[4] = #1000000 1'b1;
	IN[4] = #2000000 1'b0;
	IN[4] = #1000000 1'b1;
end 
// IN[ 3 ]
initial
begin
	IN[3] = 1'b0;
	IN[3] = #1000000 1'b1;
	IN[3] = #1000000 1'b0;
	IN[3] = #1000000 1'b1;
	IN[3] = #1000000 1'b0;
	IN[3] = #2000000 1'b1;
end 
// IN[ 2 ]
initial
begin
	IN[2] = 1'b1;
	IN[2] = #2000000 1'b0;
	IN[2] = #3000000 1'b1;
	IN[2] = #2000000 1'b0;
	IN[2] = #2000000 1'b1;
end 
// IN[ 1 ]
initial
begin
	IN[1] = 1'b1;
	IN[1] = #2000000 1'b0;
	IN[1] = #1000000 1'b1;
	IN[1] = #1000000 1'b0;
	IN[1] = #2000000 1'b1;
	IN[1] = #1000000 1'b0;
	IN[1] = #1000000 1'b1;
	IN[1] = #1000000 1'b0;
end 
// IN[ 0 ]
initial
begin
	IN[0] = 1'b0;
	IN[0] = #1000000 1'b1;
	IN[0] = #1000000 1'b0;
	IN[0] = #1000000 1'b1;
	IN[0] = #4000000 1'b0;
	IN[0] = #2000000 1'b1;
end 
endmodule

